{
  "name": "js-training",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "a": "1.x"
  },
  "devDependencies": {
    "b": "1.x"
  },
  "peerDependencies": {
    "c": "1.x"
  }
}

// ------ dependencies ------
// dependencies are the packages your project depends on.

// ------ devDependencies ------
// devDependencies are the packages that are needed during the development phase. Say a testing framework like Jest or other utilities like Babel or ESLint.

// ------ peerDependencies ------
// peerDependencies are different. They are not automatically installed.
//
//When a dependency is listed in a package as a peerDependency, it is not automatically installed. Instead, the code that includes the package must include it as its dependency.
//
//npm will warn you if you run npm install and it does not find this dependency.

// For example react-dom is a package and it needs react to work properly. now react is a peer dependecy of react-dom.
// It will give use warning if we do not have react install in our pc.

// ------ scripts ------
//An npm script is a convenient way to bundle common shell commands for your project. They are typically commands, or a string of commands, which would normally be entered at the command line in order to do something with your application.
//
//Scripts are stored in a project's package.json file, which means they're shared amongst everyone using the codebase. They help automate repetitive tasks, and mean having to learn fewer tools. Node npm scripts also ensure that everyone is using the same command with the same flags.
//
//Common use cases for npm scripts include building your Node project, starting a development server, compiling CSS, linting, minifying, or anything else you find yourself typing into your terminal frequently that's related to your project.

// ------ NODE JS â€“ package-lock ------

//package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.
//
//This file is intended to be committed into source repositories, and serves various purposes:
//
//Describe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies.
//
//Provide a facility for users to "time-travel" to previous states of node_modules without having to commit the directory itself.
//
//To facilitate greater visibility of tree changes through readable source control diffs.
//
//And optimize the installation process by allowing npm to skip repeated metadata resolutions for previously-installed packages."